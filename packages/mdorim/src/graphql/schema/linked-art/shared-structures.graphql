type Identifier implements MdorimBase & LinkedArtBase @node {
    uuid: ID! @id
    type: String! @populatedBy(callback: "type", operations: [CREATE])
    created_at: DateTime!
        @populatedBy(callback: "timestamp", operations: [CREATE])
    updated_at: DateTime!
        @populatedBy(callback: "timestamp", operations: [CREATE, UPDATE])

    id: String! @customResolver(requires: "uuid")
    label: String! @customResolver(requires: "uuid")

    classified_as: [Concept!]!
        @relationship(type: "CLASSIFIED_AS", direction: OUT)
    identified_by: [Name!]! @relationship(type: "IDENTIFIED_BY", direction: OUT)
    referred_to_by: [Statement!]!
        @relationship(type: "REFERRED_TO_BY", direction: OUT)

    assigned_by: [Assignment!]!
        @relationship(type: "ASSIGNED_BY", direction: OUT)

    content: String!
}

type Name implements MdorimBase & LinkedArtBase @node {
    uuid: ID! @id
    type: String! @populatedBy(callback: "type", operations: [CREATE])
    created_at: DateTime!
        @populatedBy(callback: "timestamp", operations: [CREATE])
    updated_at: DateTime!
        @populatedBy(callback: "timestamp", operations: [CREATE, UPDATE])

    id: String! @customResolver(requires: "uuid")
    label: String! @customResolver(requires: "uuid")

    classified_as: [Concept!]!
        @relationship(type: "CLASSIFIED_AS", direction: OUT)
    identified_by: [Identifier!]!
        @relationship(type: "IDENTIFIED_BY", direction: OUT)
    referred_to_by: [Statement!]!
        @relationship(type: "REFERRED_TO_BY", direction: OUT)

    content: String!
}

type Assignment implements MdorimBase & LinkedArtBase @node {
    uuid: ID! @id
    type: String! @populatedBy(callback: "type", operations: [CREATE])
    created_at: DateTime!
        @populatedBy(callback: "timestamp", operations: [CREATE])
    updated_at: DateTime!
        @populatedBy(callback: "timestamp", operations: [CREATE, UPDATE])

    id: String! @customResolver(requires: "uuid")
    label: String! @customResolver(requires: "uuid")

    classified_as: [Concept!]!
        @relationship(type: "CLASSIFIED_AS", direction: OUT)
    identified_by: [NameOrIdentifier!]!
        @relationship(type: "IDENTIFIED_BY", direction: OUT)
    referred_to_by: [Statement!]!
        @relationship(type: "REFERRED_TO_BY", direction: OUT)
}

type Statement implements MdorimBase & LinkedArtBase @node {
    uuid: ID! @id
    type: String! @populatedBy(callback: "type", operations: [CREATE])
    created_at: DateTime!
        @populatedBy(callback: "timestamp", operations: [CREATE])
    updated_at: DateTime!
        @populatedBy(callback: "timestamp", operations: [CREATE, UPDATE])

    id: String! @customResolver(requires: "uuid")
    label: String! @customResolver(requires: "uuid")

    classified_as: [Concept!]!
        @relationship(type: "CLASSIFIED_AS", direction: OUT)
    identified_by: [NameOrIdentifier!]!
        @relationship(type: "IDENTIFIED_BY", direction: OUT)
    referred_to_by: [Statement!]!
        @relationship(type: "REFERRED_TO_BY", direction: OUT)

    content: String!
}

type Reference implements MdorimBase @node {
    uuid: ID! @id
    type: String! @populatedBy(callback: "type", operations: [CREATE])
    created_at: DateTime!
        @populatedBy(callback: "timestamp", operations: [CREATE])
    updated_at: DateTime!
        @populatedBy(callback: "timestamp", operations: [CREATE, UPDATE])

    equivalent: [Reference!]! @relationship(type: "EQUIVALENT", direction: OUT)
}

# type Representation implements MdorimBase & LinkedArtBase @node {
#     uuid: ID! @id
#     type: EntityType! @default(value: Visual)
#     created_at: DateTime!
#         @populatedBy(callback: "timestamp", operations: [CREATE])
#     updated_at: DateTime!
#         @populatedBy(callback: "timestamp", operations: [CREATE, UPDATE])

#     id: String! @customResolver(requires: "uuid")
#     label: String! @customResolver(requires: "uuid")

#     classified_as: [Concept!]!
#         @relationship(type: "CLASSIFIED_AS", direction: OUT)
#     identified_by: [NameOrIdentifier!]!
#         @relationship(type: "IDENTIFIED_BY", direction: OUT)
#     referred_to_by: [Statement!]!
#         @relationship(type: "REFERRED_TO_BY", direction: OUT)
# }

# type _attributedBy implements MdorimBase & LinkedArtBase @node {
#     uuid: ID! @id
#     type: String! @populatedBy(callback: "type", operations: [CREATE])
#     created_at: DateTime!
#         @populatedBy(callback: "timestamp", operations: [CREATE])
#     updated_at: DateTime!
#         @populatedBy(callback: "timestamp", operations: [CREATE, UPDATE])

#     id: String! @customResolver(requires: "uuid")
#     label: String! @customResolver(requires: "uuid")

#     classified_as: [Concept!]!
#         @relationship(type: "CLASSIFIED_AS", direction: OUT)
#     identified_by: [NameOrIdentifier!]!
#         @relationship(type: "IDENTIFIED_BY", direction: OUT)
#     referred_to_by: [Statement!]!
#         @relationship(type: "REFERRED_TO_BY", direction: OUT)
# }

# type MemberOf implements MdorimBase & LinkedArtBase @node {
#     uuid: ID! @id
#     type: String! @populatedBy(callback: "type", operations: [CREATE])
#     created_at: DateTime!
#         @populatedBy(callback: "timestamp", operations: [CREATE])
#     updated_at: DateTime!
#         @populatedBy(callback: "timestamp", operations: [CREATE, UPDATE])

#     id: String! @customResolver(requires: "uuid")
#     label: String! @customResolver(requires: "uuid")

#     classified_as: [Concept!]!
#         @relationship(type: "CLASSIFIED_AS", direction: OUT)
#     identified_by: [NameOrIdentifier!]!
#         @relationship(type: "IDENTIFIED_BY", direction: OUT)
#     referred_to_by: [Statement!]!
#         @relationship(type: "REFERRED_TO_BY", direction: OUT)
# }

# type SubjectOf implements MdorimBase & LinkedArtBase @node {
#     uuid: ID! @id
#     type: String! @populatedBy(callback: "type", operations: [CREATE])
#     created_at: DateTime!
#         @populatedBy(callback: "timestamp", operations: [CREATE])
#     updated_at: DateTime!
#         @populatedBy(callback: "timestamp", operations: [CREATE, UPDATE])

#     id: String! @customResolver(requires: "uuid")
#     label: String! @customResolver(requires: "uuid")

#     classified_as: [Concept!]!
#         @relationship(type: "CLASSIFIED_AS", direction: OUT)
#     identified_by: [NameOrIdentifier!]!
#         @relationship(type: "IDENTIFIED_BY", direction: OUT)
#     referred_to_by: [Statement!]!
#         @relationship(type: "REFERRED_TO_BY", direction: OUT)
# }
